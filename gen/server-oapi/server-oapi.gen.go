// Package server_oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server_oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// NameEntry defines model for NameEntry.
type NameEntry struct {
	// Name the name
	Name *string `json:"name,omitempty"`
}

// NamesPageResponse defines model for NamesPageResponse.
type NamesPageResponse struct {
	// Limit the number of items per page
	Limit int64 `json:"limit"`

	// Names the names
	Names []NameEntry `json:"names"`

	// Page the page number
	Page int64 `json:"page"`

	// Total the total number of items
	Total int64 `json:"total"`

	// Year the year of the names
	Year int64 `json:"year"`
}

// GetV1NameParams defines parameters for GetV1Name.
type GetV1NameParams struct {
	// Year the year of the name
	Year *int64 `form:"year,omitempty" json:"year,omitempty"`

	// Page the page number
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// Limit the number of items per page
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1NameIdParams defines parameters for GetV1NameId.
type GetV1NameIdParams struct {
	// Year the year of the name
	Year *int64 `form:"year,omitempty" json:"year,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Name request
	GetV1Name(ctx context.Context, params *GetV1NameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1NameId request
	GetV1NameId(ctx context.Context, id int64, params *GetV1NameIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Name(ctx context.Context, params *GetV1NameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1NameId(ctx context.Context, id int64, params *GetV1NameIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NameIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1NameRequest generates requests for GetV1Name
func NewGetV1NameRequest(server string, params *GetV1NameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Year != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NameIdRequest generates requests for GetV1NameId
func NewGetV1NameIdRequest(server string, id int64, params *GetV1NameIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Year != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1Name request
	GetV1NameWithResponse(ctx context.Context, params *GetV1NameParams, reqEditors ...RequestEditorFn) (*GetV1NameResponse, error)

	// GetV1NameId request
	GetV1NameIdWithResponse(ctx context.Context, id int64, params *GetV1NameIdParams, reqEditors ...RequestEditorFn) (*GetV1NameIdResponse, error)
}

type GetV1NameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamesPageResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetV1NameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NameIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameEntry
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetV1NameIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NameIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1NameWithResponse request returning *GetV1NameResponse
func (c *ClientWithResponses) GetV1NameWithResponse(ctx context.Context, params *GetV1NameParams, reqEditors ...RequestEditorFn) (*GetV1NameResponse, error) {
	rsp, err := c.GetV1Name(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NameResponse(rsp)
}

// GetV1NameIdWithResponse request returning *GetV1NameIdResponse
func (c *ClientWithResponses) GetV1NameIdWithResponse(ctx context.Context, id int64, params *GetV1NameIdParams, reqEditors ...RequestEditorFn) (*GetV1NameIdResponse, error) {
	rsp, err := c.GetV1NameId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NameIdResponse(rsp)
}

// ParseGetV1NameResponse parses an HTTP response from a GetV1NameWithResponse call
func ParseGetV1NameResponse(rsp *http.Response) (*GetV1NameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamesPageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV1NameIdResponse parses an HTTP response from a GetV1NameIdWithResponse call
func ParseGetV1NameIdResponse(rsp *http.Response) (*GetV1NameIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NameIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/name)
	GetV1Name(ctx echo.Context, params GetV1NameParams) error

	// (GET /v1/name/{id})
	GetV1NameId(ctx echo.Context, id int64, params GetV1NameIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1Name converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Name(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1NameParams
	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Name(ctx, params)
	return err
}

// GetV1NameId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1NameId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1NameIdParams
	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1NameId(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/name", wrapper.GetV1Name)
	router.GET(baseURL+"/v1/name/:id", wrapper.GetV1NameId)

}

type GetV1NameRequestObject struct {
	Params GetV1NameParams
}

type GetV1NameResponseObject interface {
	VisitGetV1NameResponse(w http.ResponseWriter) error
}

type GetV1Name200JSONResponse NamesPageResponse

func (response GetV1Name200JSONResponse) VisitGetV1NameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1NamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetV1NamedefaultJSONResponse) VisitGetV1NameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetV1NameIdRequestObject struct {
	Id     int64 `json:"id"`
	Params GetV1NameIdParams
}

type GetV1NameIdResponseObject interface {
	VisitGetV1NameIdResponse(w http.ResponseWriter) error
}

type GetV1NameId200JSONResponse NameEntry

func (response GetV1NameId200JSONResponse) VisitGetV1NameIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1NameIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetV1NameIddefaultJSONResponse) VisitGetV1NameIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v1/name)
	GetV1Name(ctx context.Context, request GetV1NameRequestObject) (GetV1NameResponseObject, error)

	// (GET /v1/name/{id})
	GetV1NameId(ctx context.Context, request GetV1NameIdRequestObject) (GetV1NameIdResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetV1Name operation middleware
func (sh *strictHandler) GetV1Name(ctx echo.Context, params GetV1NameParams) error {
	var request GetV1NameRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Name(ctx.Request().Context(), request.(GetV1NameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Name")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetV1NameResponseObject); ok {
		return validResponse.VisitGetV1NameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetV1NameId operation middleware
func (sh *strictHandler) GetV1NameId(ctx echo.Context, id int64, params GetV1NameIdParams) error {
	var request GetV1NameIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1NameId(ctx.Request().Context(), request.(GetV1NameIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1NameId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetV1NameIdResponseObject); ok {
		return validResponse.VisitGetV1NameIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVwW7bMAz9FYHbUaiTbhgwn1sMwYBu2GGXIgfVYRINtqRSdNAg8L8PlOWkbeI2wwZs",
	"uwSOSfM9Pj5KO6h8E7xDxxHKHcRqjY1Jj9dEnuQhkA9IbDG9bjBGs0J5XGCsyAa23kHZ56shrIG3AaGE",
	"yGTdCrpOA+F9awkXUN7uy8w7DTemwWvHtD1Gc6Y5AcVrVClyjJLLxa9mhd8wBu8iHpetbWN5pG7b3CEp",
	"v1SWsYkqIKnQd7T01BiGEqzjD+8P4NYxrpCg04lvHCccQUMqKylvCZdQwpviMIIi618cJOn2MIbIpP/h",
	"pP6CIZHcwXl82bOpT9dKoedynFd1i4ZOF5WIFHssyKsFn1ln+C6hZDV0HunQ0Tw5wbqlP+Yh2pJ6/E4D",
	"W65xiIGGDVLssycXk4upNOUDOhMslPAuvRJkXqdJFptpMTh1hSeM9Qm5b1ctyTfKqJXdoFO5A3GmkczZ",
	"os/9Pr3p3R0MmQYZKUJ5e46eoAEfTBPq3oUT+dmYupXeLifTj9DLAiXct0hb0HnDBjF7/8lXZ0zldQeO",
	"cpmOEsnj/G0iL+zxOKvJKK3BXr/Cay6+7Y+ghHU5SWiVd4wuucSEUNsqzb74EYX77hHCawfE00MuOf6p",
	"DsJd0T5BwkvT1vzHWPR3xAnk1uFDwIpxoXDI6fR+UYqdXXQvbotJdlZ3WzW7Gl+R2eK/W5LZlVDJ159i",
	"rwi5JXfmssiRc+Bjpf3D0cjU4r/l0HyFHfvjy+e/b8dOQ0TaDL5pqYYS1syhLIrd2kcWlbtCznwNG0PW",
	"3OXpDMHeurkHqH1laglJ9Xn3MwAA///2wzQKWwkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
